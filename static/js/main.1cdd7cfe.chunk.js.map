{"version":3,"sources":["AsDeadlyAs.js","PanicStats.js","Introduction.js","AffectedCountries.js","DeathCount.js","FinalSummary.js","App.js","serviceWorker.js","index.js"],"names":["AsDeadlyAs","magnitude","countries","nextStep","firstStep","population","reduce","acc","key","countryData","risk","deathLikelihoods","deathData","code","cause","deaths","sort","a","b","startIndex","findIndex","e","className","type","onClick","stack","slice","reverse","map","moreLikelyDeath","deathEstimate","toFixed","PanicStats","useState","chart","animations","enabled","speed","easing","dynamicAnimation","labels","Intl","NumberFormat","format","dataLabels","formatter","val","seriesIndex","legend","colors","position","stroke","width","tooltip","y","options","setOptions","series","setSeries","showingNext","setShowingNext","useEffect","setTimeout","Introduction","AffectedCountries","setCountries","value","Object","keys","push","checked","has","onChange","target","newCountries","Set","add","delete","name","disabled","size","DeathCount","setMagnitude","duration","FinalSummary","App","isLazyMount","transitions","enterLeft","enterRight","exitLeft","exitRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAMe,SAASA,EAAT,GAAoE,IAA9CC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAC3DC,EAAa,YAAIH,GAAWI,QAC9B,SAACC,EAAKC,GAAN,OAAcD,EAAME,EAAYD,GAAKH,aACrC,GAEEK,EAAO,SAAC,GAAMT,GAAaI,EAE3BM,EAAmB,sBAClBC,GADkB,CAErB,CACIC,KAZ2B,uCAa3BC,MAAO,4BACPC,OAAQL,EAAOD,EAAW,GAAOJ,cAGpCW,MACG,SAACC,EAAGC,GAAJ,OAAUA,EAAEH,OAASE,EAAEF,UAI3BI,EAAaR,EAAiBS,WAAU,SAACC,GAAD,MAtBT,yCAsBgBA,EAAER,QACrD,GAAmB,IAAfM,EACA,OACI,yBAAKG,UAAU,gBACX,kDACA,gHAGA,gIAGA,6BACI,4BAAQC,KAAK,SAASD,UAAU,kBAAkBE,QAASpB,GAA3D,gBAMhBe,GAAc,GACG,IACbA,EAAa,GAEjB,IAEMM,EAFmBd,EAAiBe,MAAMP,EAAYA,EAAa,GAAGQ,UAE7CA,UAAUC,KACrC,SAACC,GACG,IAAMC,EAAiBD,EAAgBd,OAASN,EAAW,GAAOJ,WAAcK,EAEhF,OACI,wBAAIY,UAAU,yBAAyBd,IAAKqB,EAAgBhB,MACxD,4BAAKgB,EAAgBf,OACrB,4BArDmB,yCAsDfe,EAAgBhB,KACV,OADN,UAESiB,EAAcC,QAAQ,GAF/B,UASpB,OACI,yBAAKT,UAAU,gBACX,oDACA,+BACI,+BACI,4BACI,8CAGA,+CAKR,+BACKG,IAGT,yBAAKH,UAAU,mBACX,4BAAQC,KAAK,SAASC,QAASrB,GAA/B,+B,6BClFD,SAAS6B,EAAT,GAAoE,IAA9C/B,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAC3DC,EAAa,YAAIH,GAAWI,QAC9B,SAACC,EAAKC,GAAN,OAAcD,EAAME,EAAYD,GAAKH,aACrC,GAH0E,EAMhD4B,mBAAS,CACnCC,MAAO,CACHC,WAAY,CACRC,SAAS,EACTC,MAAO,IACPC,OAAQ,YACRC,iBAAkB,CACdH,SAAS,EACTC,MAAO,OAInBG,OAAQ,CAAC,eAAD,QAAgB,IAAIC,KAAKC,cAAeC,OAAOtC,KACvDuC,WAAY,CACRC,UAAW,SAACC,EAAD,GAA2B,IAAnBC,EAAkB,EAAlBA,YACf,MAAM,GAAN,OAA0B,IAAhBA,EAAoB,QAAU,OAAxC,aAAmDD,EAAIf,QAAQ,GAA/D,OAGRiB,OAAQ,CACJR,OAAQ,CACJS,OAAQ,CAAC,OAAQ,SAErBC,SAAU,UAEdC,OAAQ,CACJF,OAAQ,CAAC,YAAa,QACtBG,MAAO,GAEXC,QAAS,CACLC,EAAG,CACCT,UAAW,iBAAM,QApCiD,mBAMvEU,EANuE,KAM9DC,EAN8D,OAwClDvB,mBAAS,CAAC5B,IAxCwC,mBAwCvEoD,EAxCuE,KAwC/DC,EAxC+D,OAyCxCzB,oBAAS,GAzC+B,mBAyCvE0B,EAzCuE,KAyC1DC,EAzC0D,KAsD9E,OAXAC,qBAAU,WACNC,YAAW,WACPN,EAAW,eACJD,EADG,CAENf,OAAQ,CAAC,eAAD,QAAgB,IAAIC,KAAKC,cAAeC,OAAOtC,IAA/C,mBAAyE,IAAIoC,KAAKC,cAAeC,OAAO,SAAC,GAAM1C,GAAW8B,QAAQ,SAE9I2B,EAAU,CAACrD,EAAU,SAAI,GAAMJ,GAArB,SAAiC,GAAMA,KACjD2D,GAAe,KAChB,OACJ,CAAC3D,EAAWC,IAEX,YAAMD,GAAYI,EAEd,6BACI,+CACA,8GAC4E,IAAIoC,KAAKC,cAAeC,QAAQ,SAAC,GAAM1C,GAAaI,GAAY0B,QAAQ,IADpJ,aAGA,sFAGA,6BACI,4BAAQR,KAAK,SAASD,UAAU,kBAAkBE,QAASpB,GAA3D,eAOZ,yBAAKkB,UAAU,eACX,wDACA,kBAAC,IAAD,CACIC,KAAK,MACLkC,OAAQA,EACRF,QAASA,EACTH,MAAO,OAGS,IAAhBO,GAGQ,6BACI,4BAAQpC,KAAK,SAASD,UAAU,kBAAkBE,QAASrB,GAA3D,uBCvFb,SAAS4D,EAAT,GAAqC,IAAb5D,EAAY,EAAZA,SACnC,OACI,yBAAKmB,UAAU,gBACX,yDACA,uBAAGA,UAAU,mBAAb,yDAGA,uBAAGA,UAAU,mBAAb,sDAGA,uBAAGA,UAAU,mBAAb,iEAGA,uBAAGA,UAAU,mBAAb,4DAGA,wBAAIA,UAAU,mBAAd,OAAoC,6BAApC,QACA,uBAAGA,UAAU,mBAAb,qEAGA,4BAAQA,UAAU,kBAAkBC,KAAK,SAASC,QAASrB,GAA3D,8CACA,uBAAGmB,UAAU,+BAAb,8CAC+C,qCAD/C,oC,sCCjBG,SAAS0C,EAAT,GAAmE,IAAtC9D,EAAqC,EAArCA,UAAW+D,EAA0B,EAA1BA,aAAc9D,EAAY,EAAZA,SACjE,OACI,6BACI,yBAAKmB,UAAU,sBACX,yBAAKA,UAAU,kCACX,6DACA,kBAAC,IAAD,CACI4C,MACI,YAAIhE,GAAWI,QACX,SAACC,EAAKC,GAAN,OAAcD,EAAME,EAAYD,GAAKH,aACrC,GAGRsC,OAAO,YAGf,yBAAKrB,UAAU,0CAEP6C,OAAOC,KAAK3D,GAAaH,QACrB,SAACC,EAAKC,GAuBF,OAtBAD,EAAI8D,KACA,yBAAK/C,UAAU,kBAAkBd,IAAKA,GAClC,+BACI,kBAAC,IAAD,CACI8D,QAASpE,EAAUqE,IAAI/D,GACvBgE,SACI,YAAiB,IAAdC,EAAa,EAAbA,OACOC,EAAe,IAAIC,IAAIzE,GACzBuE,EAAOH,QACPI,EAAaE,IAAIpE,GAEjBkE,EAAaG,OAAOrE,GAExByD,EAAaS,MAIzB,0BAAMpD,UAAS,8BAAyBd,KACvCC,EAAYD,GAAKsE,QAIvBvE,IAEX,MAKhB,6BACI,4BACIgB,KAAK,SACLC,QAASrB,EACT4E,SAA6B,IAAnB7E,EAAU8E,MAHxB,4BCrDD,SAASC,EAAT,GAA4D,IAAtChF,EAAqC,EAArCA,UAAWiF,EAA0B,EAA1BA,aAAc/E,EAAY,EAAZA,SAC1D,OACI,yBAAKmB,UAAU,eACX,gEAGA,kBAAC,IAAD,CACI4C,MAAK,SAAE,GAAMjE,GACb0C,OAAO,SACPwC,SAAU,OAEd,yBAAK7D,UAAU,WACX,4BACIC,KAAK,SACLC,QACI,WACI0D,EAAajF,EAAY,KAAOA,EAAY,IAAOA,KAJ/D,QAUA,4BACIsB,KAAK,SACLC,QACI,WACI0D,EAAajF,EAAY,EAAIA,EAAY,IAAOA,KAJ5D,UAWJ,6BACI,4BACIsB,KAAK,SACLC,QAASrB,GAFb,eCnCD,SAASiF,EAAT,GAAsC,IAAdhF,EAAa,EAAbA,UACnC,OACI,yBAAKkB,UAAU,iBACX,gDACA,0JAEI,4BACI,2CACA,8CACA,yDACA,iGACA,8EACA,6CAGR,6BACI,4BAAQC,KAAK,SAASC,QAASpB,GAA/B,wB,4BCqBDiF,MA1Bf,WAAgB,IAAD,EACuBpD,mBAAS,GADhC,mBACJhC,EADI,KACOiF,EADP,OAEuBjD,mBAAS,IAAI0C,IAAI,KAFxC,mBAEJzE,EAFI,KAEO+D,EAFP,KAIX,OACI,yBAAK3C,UAAU,OACX,kBAAC,IAAD,CACIgE,aAAW,EACXC,YAAa,CACTC,UAAW,kBACXC,WAAY,kBACZC,SAAU,mBACVC,UAAW,qBAGf,kBAAC5B,EAAD,MACA,kBAACkB,EAAD,CAAYhF,UAAWA,EAAWiF,aAAcA,IAChD,kBAAClB,EAAD,CAAmB9D,UAAWA,EAAW+D,aAAcA,IACvD,kBAACjC,EAAD,CAAY9B,UAAWA,EAAWD,UAAWA,IAC7C,kBAACD,EAAD,CAAYE,UAAWA,EAAWD,UAAWA,IAC7C,kBAACmF,EAAD,SCrBIQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1cdd7cfe.chunk.js","sourcesContent":["import React from 'react';\nimport countryData from './countryData.json';\nimport deathData from './deathData.json';\n\nconst USER_ENTERED_DEATH_REASON_CODE = 'affc763f-8049-4d22-aed5-212b5bd0beb4';\n\nexport default function AsDeadlyAs({ magnitude, countries, nextStep, firstStep }) {\n    const population = [...countries].reduce(\n        (acc, key) => acc + countryData[key].population,\n        0\n    );\n    const risk = (10 ** magnitude) / population;\n\n    const deathLikelihoods = [\n        ...deathData,\n        {\n            code: USER_ENTERED_DEATH_REASON_CODE,\n            cause: 'Whatever Brought You Here',\n            deaths: risk * countryData['us'].population\n        }\n    ]\n        .sort(  // Sort in descending order\n            (a, b) => b.deaths - a.deaths\n        );\n\n    // Ideally, we want 4 worse causes of death.  But, if we can't find 4, we still want to display 5 items.\n    let startIndex = deathLikelihoods.findIndex((e) => e.code === USER_ENTERED_DEATH_REASON_CODE);\n    if (startIndex === 0) {\n        return (\n            <div className=\"as-deadly-as\">\n                <h1>So, how bad is it?</h1>\n                <p>\n                    If what you&apos;ve entered is accurate, it&apos;ll be worse than any known cause of death.\n                </p>\n                <p>\n                    Double-check those numbers, but if they're right then go ahead and panic to your heart's content.\n                </p>\n                <div>\n                    <button type=\"button\" className=\"animated fadeIn\" onClick={firstStep}>Try again</button>\n                </div>\n            </div>\n        );\n    }\n\n    startIndex -= 4;\n    if (startIndex < 0) {\n        startIndex = 0;\n    }\n    const moreLikelyDeaths = deathLikelihoods.slice(startIndex, startIndex + 5).reverse();\n\n    const stack = moreLikelyDeaths.reverse().map(\n        (moreLikelyDeath) => {\n            const deathEstimate = (moreLikelyDeath.deaths / countryData['us'].population) / risk;\n\n            return (\n                <tr className=\"animated fadeInDownBig\" key={moreLikelyDeath.code}>\n                    <td>{moreLikelyDeath.cause}</td>\n                    <td>{\n                        moreLikelyDeath.code === USER_ENTERED_DEATH_REASON_CODE\n                            ? '1.0x'    // To prevent rounding problems from preventing this from coming out at 1.0x\n                            : `${deathEstimate.toFixed(1)}x`\n                    }</td>\n                </tr>\n            );\n        }\n    );\n\n    return (\n        <div className=\"as-deadly-as\">\n            <h1>How does it compare?</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th>\n                            Cause of death\n                        </th>\n                        <th>\n                            Annual deaths\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {stack}\n                </tbody>\n            </table>\n            <div className=\"animated fadeIn\">\n                <button type=\"button\" onClick={nextStep}>How can I protect myself?</button>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport countryData from './countryData.json';\n\nexport default function PanicStats({ magnitude, countries, nextStep, firstStep }) {\n    const population = [...countries].reduce(\n        (acc, key) => acc + countryData[key].population,\n        0\n    );\n\n    const [options, setOptions] = useState({\n        chart: {\n            animations: {\n                enabled: true,\n                speed: 3000,\n                easing: 'easeinout',\n                dynamicAnimation: {\n                    enabled: true,\n                    speed: 350\n                }\n            }\n        },\n        labels: [`Population: ${new Intl.NumberFormat().format(population)}`],\n        dataLabels: {\n            formatter: (val, { seriesIndex }) => {\n                return `${seriesIndex === 0 ? 'Alive' : 'Dead'}: ${val.toFixed(6)}%`;\n            }\n        },\n        legend: {\n            labels: {\n                colors: ['#fff', '#fff']\n            },\n            position: 'bottom',\n        },\n        stroke: {\n            colors: ['#00000000', '#fff'],\n            width: 1\n        },\n        tooltip: {\n            y: {\n                formatter: () => ''\n            }\n        }\n    });\n    const [series, setSeries] = useState([population]);\n    const [showingNext, setShowingNext] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setOptions({\n                ...options,\n                labels: [`Population: ${new Intl.NumberFormat().format(population)}`, `Deaths: ${new Intl.NumberFormat().format((10 ** magnitude).toFixed(0))}`]\n            });\n            setSeries([population - (10 ** magnitude), 10 ** magnitude]);\n            setShowingNext(true);\n        }, 5000);\n    }, [magnitude, countries]);\n\n    if (10 ** magnitude > population) {\n        return (\n            <div>\n                <h1>START BREEDING!</h1>\n                <p>\n                {`In order to have this many people die, you'll first need to add another ${new Intl.NumberFormat().format(((10 ** magnitude) - population).toFixed(0))} people!`}\n                </p>\n                <p>\n                    You should probably recheck that annual death estimate.\n                </p>\n                <div>\n                    <button type=\"button\" className=\"animated fadeIn\" onClick={firstStep}>Try again</button>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"panic-stats\">\n            <h1>Deaths versus population</h1>\n            <Chart\n                type=\"pie\"\n                series={series}\n                options={options}\n                width={320}\n            />\n            {\n                showingNext === false\n                    ? false\n                    : (\n                        <div>\n                            <button type=\"button\" className=\"animated fadeIn\" onClick={nextStep}>Put it in context</button>\n                        </div>\n                    )\n            }\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function Introduction({ nextStep }) {\n    return (\n        <div className=\"introduction\">\n            <h1>How panicked should I be?</h1>\n            <p className=\"animated fadeIn\">\n                Something new and terrible is happening in the world.\n            </p>\n            <p className=\"animated fadeIn\">\n                Maybe it&apos;s a new supervirus. Maybe it&apos;s terrorism.\n            </p>\n            <p className=\"animated fadeIn\">\n                Whatever it is, it&apos;s going to kill you and everyone you love.\n            </p>\n            <p className=\"animated fadeIn\">\n                At least, that&apos;s what the media seems to be telling you.\n            </p>\n            <h2 className=\"animated fadeIn\">KEEP<br/>CALM</h2>\n            <p className=\"animated fadeIn\">\n                Let&apos;s find out exactly how dangerous this new threat really is...\n            </p>\n            <button className=\"animated fadeIn\" type=\"button\" onClick={nextStep}>Prepare for the worst and click to proceed</button>\n            <p className=\"animated fadeIn small-print\">\n                This site makes some major - and I do mean <em>major</em> - simplifications. Don&apos;t @ me.\n            </p>\n        </div>\n    );\n}\n","import CheckBox from 'rc-checkbox';\nimport 'rc-checkbox/assets/index.css';\nimport React from 'react';\nimport Odometer from 'react-odometerjs';\nimport countryData from './countryData.json';\n\nexport default function AffectedCountries({ countries, setCountries, nextStep }) {\n    return (\n        <div>\n            <div className=\"affected-countries\">\n                <div className=\"affected-countries__risk-count\">\n                    <h1>Which countries are affected?</h1>\n                    <Odometer\n                        value={\n                            [...countries].reduce(\n                                (acc, key) => acc + countryData[key].population,\n                                0\n                            )\n                        }\n                        format=\"(,ddd)\"\n                    />\n                </div>\n                <div className=\"affected-countries__country-checkboxes\">\n                    {\n                        Object.keys(countryData).reduce(\n                            (acc, key) => {\n                                acc.push(\n                                    <div className=\"countryCheckbox\" key={key}>\n                                        <label>\n                                            <CheckBox\n                                                checked={countries.has(key)}\n                                                onChange={\n                                                    ({ target }) => {\n                                                        const newCountries = new Set(countries);\n                                                        if (target.checked) {\n                                                            newCountries.add(key);\n                                                        } else {\n                                                            newCountries.delete(key);\n                                                        }\n                                                        setCountries(newCountries);\n                                                    }\n                                                }\n                                            />\n                                            <span className={`flag-icon flag-icon-${key}`}></span>\n                                            {countryData[key].name}\n                                        </label>\n                                    </div>\n                                );\n                                return acc;\n                            },\n                            []\n                        )\n                    }\n                </div>\n            </div>\n            <div>\n                <button\n                    type=\"button\"\n                    onClick={nextStep}\n                    disabled={countries.size === 0}\n                >\n                    Let's look at the math\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport Odometer from 'react-odometerjs';\n\nexport default function DeathCount({ magnitude, setMagnitude, nextStep }) {\n    return (\n        <div className=\"death-count\">\n            <h1>\n                How many will die within a year?\n            </h1>\n            <Odometer\n                value={10 ** magnitude}\n                format=\"(,ddd)\"\n                duration={1500}\n            />\n            <div className=\"buttons\">\n                <button\n                    type=\"button\"\n                    onClick={\n                        () => {\n                            setMagnitude(magnitude < 8.75 ? magnitude + 0.25 : magnitude);\n                        }\n                    }\n                >\n                    More\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={\n                        () => {\n                            setMagnitude(magnitude > 0 ? magnitude - 0.25 : magnitude);\n                        }\n                    }\n                >\n                    Fewer\n                </button>\n            </div>\n            <div>\n                <button\n                    type=\"button\"\n                    onClick={nextStep}\n                >\n                    Next Step\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function FinalSummary({ firstStep }) {\n    return (\n        <div className=\"final-summary\">\n            <h1>How to stay safe</h1>\n            <p>\n                Without knowing anything whatsoever about which threat brought you here, here are some tips that are almost certain to help:\n                <ul>\n                    <li>Don't panic</li>\n                    <li>Get vaccinated</li>\n                    <li>Wash your hands regularly</li>\n                    <li>Get a regular check-up with your doctor, even when you're healthy</li>\n                    <li>Get your news from reliable, low-panic sources</li>\n                    <li>Don't panic</li>\n                </ul>\n            </p>\n            <div>\n                <button type=\"button\" onClick={firstStep}>Try another threat</button>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport StepWizard from 'react-step-wizard';\nimport AsDeadlyAs from './AsDeadlyAs.js';\nimport PanicStats from './PanicStats.js';\nimport Introduction from './Introduction.js';\nimport AffectedCountries from './AffectedCountries.js';\nimport DeathCount from './DeathCount.js';\nimport FinalSummary from './FinalSummary.js';\nimport 'flag-icon-css/css/flag-icon.min.css';\nimport './App.css';\nimport './odometer-theme-car.css';\nimport 'animate.css/animate.min.css'\n\nfunction App() {\n    const [magnitude, setMagnitude] = useState(2);\n    const [countries, setCountries] = useState(new Set([]));\n\n    return (\n        <div className=\"App\">\n            <StepWizard\n                isLazyMount\n                transitions={{\n                    enterLeft: 'fadeIn animated',\n                    enterRight: 'fadeIn animated',\n                    exitLeft: 'fadeOut animated',\n                    exitRight: 'fadeOut animated'\n                }}\n            >\n                <Introduction />\n                <DeathCount magnitude={magnitude} setMagnitude={setMagnitude} />\n                <AffectedCountries countries={countries} setCountries={setCountries} />\n                <PanicStats countries={countries} magnitude={magnitude} />\n                <AsDeadlyAs countries={countries} magnitude={magnitude} />\n                <FinalSummary />\n            </StepWizard>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}